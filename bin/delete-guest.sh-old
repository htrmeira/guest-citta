#!/bin/bash

# This script removes a guest user with his tenant, instances, volumes, snapshots, snapshots volumes, networks and routers.

######################### BEGIN OF CONFIG #########################

source ../config/environment.sh

#guest_username=guest046981
#guest_username=Silibrina

########################## END OF CONFIG ##########################

list_instance_ids() {
	nova list --all-tenants=1 --tenant=$tenant_id | grep -v "ID" | grep "^| " | awk '{print $2}'
}

# terminate all the instances of the current tenant.
# I the given user a guest it will
terminate_instances() {
	instance_ids=`list_instance_ids`
	success_or_die

	echo "==> Terminating instances..."
	for instance in $instance_ids; do
		echo -n "	Terminating $instance..."
		nova delete $instance
		check_status_quietly $?
	done
	local status=$?
	echo -n "==> Instances terminated"
	check_status_quietly $status
}

# This method lists the ids of all the images and snapshots of the tenant in use.
# The tenant id is defined in $tenant_id.
list_image_ids() {
	glance image-list --all-tenants --owner $tenant_id | grep -i "^| " | grep -v "ID" | awk '{ print $2 }'
}

# Removes the images and snapshots belonging to the tenant in use.
# The tentant id is defined in $tenant_id
delete_images() {
	image_ids=$(list_image_ids)
	echo "==> Deleting images and snapshots..."
	for image in $image_ids; do
		echo -n "	Deleting $image..."
		glance image-update --is-public=False --is-protected=False $image
		nova image-delete $image
		check_status_quietly $?
	done
	local status=$?
	echo -n "==> Images and snapshots deleted"
	check_status_quietly $status
}

list_volume_snapshot_ids() {
	local volume_snapshot_ids=$(cinder snapshot-list --all-tenants |  grep -i "^| " | grep -v "^| *ID *|" | awk '{ print $2 }')
	for volume_snapshot in $volume_snapshot_ids; do
		local tenant=$(cinder snapshot-show $volume_snapshot | grep os-extended-snapshot-attributes:project_id | awk '{ print $4 }')
		if [ "$tenant" == "$tenant_id" ]; then
			echo $volume_snapshot
		fi
	done
}

delete_volume_snapshots() {
	volume_snapshot_ids=$(list_volume_snapshot_ids)
	echo "==> Deleting volume snapshots..."
	for volume_snapshot in $volume_snapshot_ids; do
		echo -n "	Deleting $volume_snapshot..."
		cinder snapshot-delete $volume_snapshot
		check_status_quietly $?
	done
	local status=$?
	echo -n "==> Volume snapshots deleted"
	check_status_quietly $status
}

list_volume_ids() {
	local all_volume_ids=$(cinder list --all-tenants 1 | grep -i "^| " | grep -v "^| *ID *|" | awk '{ print $2 }')
	for volume_id in $all_volume_ids; do
		local tenant=$(cinder show $volume_id | grep os-vol-tenant-attr:tenant_id | awk '{ print $4 }')
		if [ "$tenant" == "$tenant_id" ]; then
			echo $volume_id
		fi
	done
}

# Receivers the volume id that is being checked.
check_snapshot_exists() {
	local volume_id_snapshot=$(cinder snapshot-list --all-tenants 1 | grep -i  "^| " | grep -v "^| *ID *|" | awk '{ print $4}')
	for volume_id in $volume_id_snapshot; do
		if [ $1 == $volume_id ]; then
			return 0
		fi
	done
	return 1
}

delete_volumes() {
	echo "==> Deleting volumes..."
	# delete volume only if there is no snapshot related to it.
	local volume_ids=$(list_volume_ids)
	local i_status=$?
	for volume_id in $volume_ids; do
		echo -n "	Deleting $volume_id..."
		if check_snapshot_exists $volume_id ; then
			delete_volume_snapshots >> /dev/null;
			while check_snapshot_exists $volume_id; do
				echo -n ".";
				sleep 3;
			done
		fi
		cinder delete $volume_id
		i_status=$?
		check_status_quietly $i_status
	done
	echo -n "==> Volumes deleted"
	check_status_quietly $i_status
}

# This is the main of this script.
delete_guest() {
	terminate_instances
	delete_images
	#delete_volume_snapshots
}

check_username() {
	if [ -z $guest_username ]; then
		echo_fail "I am not a psychic! Give me a usename, please."
		exit 1;
	fi
}

check_tenant() {
	tenant_id=$(keystone tenant-list | grep $guest_username | awk '{ print $2 }')

	if [ -z $tenant_id ]; then
		echo_fail "Apparently, you are crazy and this user does not exist. Please check your parameters"
		exit 1;
	fi

}

define_parameters() {
	while [ ! -z $1 ]; do
		case $1 in
			-u | --username)
				shift
				guest_username=$1
				;;
		esac
		shift
	done
	check_username
	success_or_die
	check_tenant
}

#################### NEUTRON ####################
list_routers() {
	local router_ids=$(neutron router-list 2>/dev/null | grep -i "^|" | grep -v "| *id *|" | awk '{ print $2 }')
	for router_id in $router_ids; do
		local router_tenant_id=$(neutron router-show $router_id 2>/dev/null | grep -i "^| *tenant_id *|" | awk '{ print $4 }')
		if [ "$router_tenant_id" == "$tenant_id" ]; then
			echo $router_id;
		fi
	done
}

list_router_ports() {
	local router_port_ids=$(neutron router-port-list $1 2>/dev/null | grep -i "^|" | grep -v "^| *id *|" | awk '{ print $2 }' )
	for router_port_id in $router_port_ids; do
		echo $router_port_id
	done

}

delete_routers() {
	echo "==> Deleting routers..."
	local router_ids=$(list_routers)
	for router_id in $router_ids; do
		echo -n "   Deleting $router_id..."
		local router_port_ids=$(list_router_ports $router_id)
		for router_port_id in $router_port_ids; do
			neutron router-interface-delete $router_id port=$router_port_id 2>/dev/null
		done
		neutron router-delete $router_id 2>/dev/null
		check_status_quietly $?
	done
	echo -n "==> Routers deleted"
	check_status_quietly $?
}

list_ports() {
	neutron port-list 2>/dev/null | grep -i "subnet_id....$1" | awk '{ print  $2}'
}

delete_port() {
	 neutron port-delete $i 2>/dev/null
	 echo -n "."
}

delete_subnets() {
	echo "==> Deleting subnets..."
	local subnet_ids=$(list_subnets_ids)
	for subnet_id in $subnet_ids; do
		echo -n "   Deleting $subnet_id..."
		local port_ids=$(list_ports $subnet_id)
		for port_id in $port_ids; do
			delete_port $port_id 2>/dev/null
		done
		neutron subnet-delete $subnet_id 2>/dev/null
		check_status_quietly $?
	done
	echo -n "==> Subnet deleted"
	check_status_quietly $?
}

list_subnets_ids() {
	local subnet_ids=$(neutron subnet-list 2>/dev/null | grep -i "^|" | grep -v "^| *id *|" | awk '{ print $2 }')
	for subnet_id in $subnet_ids; do
		local subnet_tenant_id=$(neutron subnet-show $subnet_id 2>/dev/null | grep -i "^| *tenant_id *|" | awk '{ print $4 }' )
		if [ "$subnet_tenant_id" == "$tenant_id" ]; then
			echo $subnet_id
		fi
	done
}

####
list_net_ids() {
	local net_ids=$(neutron net-list 2>/dev/null | grep -i "^|" | grep -v "| *id *|" | awk '{ print $2 }')
	for net_id in $net_ids; do
		local net_tenant_id=$(neutron net-show $net_id 2>/dev/null | grep -i "^| *tenant_id *|" | awk '{ print $4 }')
		if [ "$net_tenant_id" == "$tenant_id" ]; then
			echo $net_id
		fi
	done
}

delete_nets() {
	echo "==> Deleting nets..."
	local net_ids=$(list_net_ids)
	for net_id in $net_ids; do
		echo -n "   Deleting $net_id..."
		neutron net-delete $net_id 2>/dev/null
		check_status_quietly $?
	done
	echo -n "==> Net deleted"
	check_status_quietly $?
}
#################### NEUTRON ####################


define_parameters $@
#delete_guest
#list_trove_instances_ids;


#terminate_instances
#delete_images

#delete_volumes
#delete_routers;
#delete_subnets;
#delete_nets


# TODO: review what must be deleted.
# secgroups (nova cli).
